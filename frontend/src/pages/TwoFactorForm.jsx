import React, { useEffect, useRef, useState } from "react";

/**
 * Props:
 * - onSubmit(codeOrBackup) -> Promise resolves when verified
 * - onUseBackupToggle(optional) - called when user toggles backup mode
 * - showResend (bool) - whether to render resend countdown (UI only)
 * - resendDelay (seconds) default 30
 */
export default function TwoFactorForm({
  onSubmit,
  onUseBackupToggle,
  showResend = true,
  resendDelay = 30,
}) {
  const [otp, setOtp] = useState(["", "", "", "", "", ""]);
  const [usingBackup, setUsingBackup] = useState(false);
  const [backupValue, setBackupValue] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [resendSeconds, setResendSeconds] = useState(resendDelay);

  const inputsRef = useRef([]);

  useEffect(() => {
    // focus first input on mount
    inputsRef.current[0]?.focus();
  }, []);

  useEffect(() => {
    if (!showResend) return;
    setResendSeconds(resendDelay);
    const t = setInterval(() => {
      setResendSeconds((s) => {
        if (s <= 1) {
          clearInterval(t);
          return 0;
        }
        return s - 1;
      });
    }, 1000);
    return () => clearInterval(t);
  }, [resendDelay, showResend]);

  // allow pasting full code
  function handlePaste(e) {
    const paste = (e.clipboardData || window.clipboardData).getData("text");
    const digits = paste.replace(/\D/g, "").slice(0, 6).split("");
    if (digits.length === 6) {
      const next = ["", "", "", "", "", ""];
      digits.forEach((d, i) => (next[i] = d));
      setOtp(next);
      // focus last
      inputsRef.current[5]?.focus();
    }
  }

  function handleChange(value, idx) {
    if (!/^\d?$/.test(value)) return;
    const next = [...otp];
    next[idx] = value;
    setOtp(next);
    if (value && idx < 5) {
      inputsRef.current[idx + 1]?.focus();
    }
  }

  function handleKeyDown(e, idx) {
    if (e.key === "Backspace" && !otp[idx] && idx > 0) {
      inputsRef.current[idx - 1]?.focus();
    }
  }

  async function submit(e) {
    e?.preventDefault?.();
    setError("");
    setLoading(true);
    try {
      const code = usingBackup ? backupValue.trim() : otp.join("");
      if (!code || code.length < 1) {
        setError("Enter the 6-digit code or a backup code.");
        setLoading(false);
        return;
      }
      await onSubmit(code);
      // let parent handle navigation on success
    } catch (err) {
      console.error("2FA verify error:", err);
      setError(
        err?.error?.message || err?.message || "Invalid code â€” please try again."
      );
    } finally {
      setLoading(false);
    }
  }

  function toggleBackup() {
    setUsingBackup((v) => {
      const next = !v;
      onUseBackupToggle?.(next);
      return next;
    });
  }

  return (
    <div className="bg-white flex flex-col justify-center items-center p-8 rounded-xl shadow-lg w-fit">
      <div className="text-center mb-6">
        <h1 className="text-3xl font-bold text-[#001BB7]">DigitalSecure</h1>
        <h2 className="text-xl font-semibold text-gray-800 mt-4">
          Enter 2FA code
        </h2>
        <p className="text-gray-500 mt-2 text-sm">
          Enter the verification code generated by your authenticator app.
        </p>
      </div>

      <form onSubmit={submit} onPaste={handlePaste}>
        {/* Error */}
        {error && (
          <div className="mb-4 text-sm text-red-600 bg-red-50 p-3 rounded">
            {error}
          </div>
        )}

        {/* Code input or backup input */}
        {!usingBackup ? (
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              CODE
            </label>
            <div className="flex justify-center gap-2">
              {otp.map((d, i) => (
                <input
                  key={i}
                  id={`otp-${i}`}
                  ref={(el) => (inputsRef.current[i] = el)}
                  value={d}
                  onChange={(e) => handleChange(e.target.value, i)}
                  onKeyDown={(e) => handleKeyDown(e, i)}
                  maxLength={1}
                  inputMode="numeric"
                  pattern="[0-9]*"
                  className={`otp-input w-12 h-12 text-center text-xl font-bold bg-gray-50 border-2 rounded-md ${
                    error ? "border-red-400" : "border-gray-200"
                  }`}
                  aria-label={`digit ${i + 1}`}
                />
              ))}
            </div>
          </div>
        ) : (
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Backup code
            </label>
            <input
              value={backupValue}
              onChange={(e) => setBackupValue(e.target.value)}
              placeholder="Enter one-time backup code"
              className="w-full px-4 py-2 border border-gray-300 rounded-md"
            />
          </div>
        )}

        <div className="flex justify-between items-center text-sm text-gray-600 mb-6">
          <button
            type="button"
            onClick={toggleBackup}
            className="flex items-center hover:text-[#001BB7] text-left"
          >
            <span className="material-icons mr-1 text-base">backup</span>
            {usingBackup ? "Use authenticator app code" : "Use a backup code"}
          </button>

          {showResend ? (
            <span className="text-gray-500">
              {resendSeconds > 0
                ? `Resend code in ${resendSeconds}s`
                : "Resend code"}
            </span>
          ) : null}
        </div>

        <div className="text-center">
          <button
            type="submit"
            disabled={loading}
            className="group relative w-full flex justify-center py-3 px-4 rounded-lg text-sm font-semibold text-white bg-gradient-to-r from-[#001BB7] to-[#0046FF] hover:shadow-lg"
          >
            {loading ? (
              <div className="border-2 border-gray-200 border-t-2 border-t-[#0046FF] rounded-full w-4 h-4 animate-spin" />
            ) : (
              "Verify"
            )}
          </button>

          <div className="mt-4">
            <button
              type="button"
              onClick={() => window.history.back()}
              className="text-sm text-gray-600 hover:text-[#001BB7]"
            >
              Return to login
            </button>
          </div>
        </div>
      </form>
    </div>
  );
}
