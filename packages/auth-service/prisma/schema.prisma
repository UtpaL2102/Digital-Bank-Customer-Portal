
generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL") // ...?schema=auth
}

model User {
id String @id @default(uuid()) @db.Uuid
name String
email String @unique
phone_number String?
password_hash String
role String @default("user")
status String @default("pending_kyc")
refresh_token_hash String?
refresh_token_expires DateTime?
created_at DateTime @default(now())
updated_at DateTime @updatedAt
deleted_at DateTime?

// Relations
refreshTokens RefreshToken[]
mfa UserMfa?
backupCodes UserMfaBackupCode[]
kyc KycDetails?
kycDocuments KycDocument[]
notificationPrefs NotificationPrefs?
}

model RefreshToken {
id String @id @default(uuid()) @db.Uuid
user_id String @db.Uuid
token_hash String @unique
user_agent String?
ip String?
created_at DateTime @default(now())
expires_at DateTime
revoked_at DateTime?

user User @relation(fields: [user_id], references: [id])
}

model UserMfa {
user_id String @id @db.Uuid
type String @default("totp")
secret_encrypted String
enabled Boolean @default(false)
created_at DateTime @default(now())
updated_at DateTime @updatedAt

user User @relation(fields: [user_id], references: [id])
}

model UserMfaBackupCode {
id String @id @default(uuid()) @db.Uuid
user_id String @db.Uuid
code_hash String
used_at DateTime?

user User @relation(fields: [user_id], references: [id])
}

model KycDetails {
id String @id @default(uuid()) @db.Uuid
user_id String @unique @db.Uuid
document_type String?
document_number String?
issue_date DateTime?
expiry_date DateTime?
verified Boolean @default(false)
status String @default("submitted")
verification_score Float?
failure_reason String?
created_at DateTime @default(now())

user User @relation(fields: [user_id], references: [id])
}

model KycDocument {
id String @id @default(uuid()) @db.Uuid
user_id String @db.Uuid
doc_kind String // id_front | id_back | address_proof | selfie
file_url String // Cloudinary public_id
file_hash String?
created_at DateTime @default(now())

user User @relation(fields: [user_id], references: [id])
}

model NotificationPrefs {
user_id String @id @db.Uuid
email_enabled Boolean @default(true)
sms_enabled Boolean @default(false)
in_app_enabled Boolean @default(true)
transactions Boolean @default(true)
low_balance Boolean @default(true)
security Boolean @default(true)
low_balance_threshold Decimal @default(100) @db.Decimal(19,2)

user User @relation(fields: [user_id], references: [id])
}

model AuditLog {
id String @id @default(uuid()) @db.Uuid
user_id String @db.Uuid
action String
details String?
performed_at DateTime @default(now())
}

model Notification {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  type       String   // e.g., "kyc_submitted", "kyc_verified", "kyc_failed"
  title      String
  message    String
  data       Json?
  read       Boolean  @default(false)
  created_at DateTime @default(now())

  @@index([user_id])
}
